스프링부트
    - 스프링과 스프링부트 구성물은 다르지 않다
    - 스프링부트는 스프링에 설정 자동 세팅/관리를 더한 것
    - JAVA, DB, HTTP, JS, CSS 및 Servlet** 등의 이해도가 필요
    - 스프링
        1. Plain Old Java Object 기반 경량화된 개발환경을 제공하는 오픈소스 프레임워크
            - 무서운 객체가 아니라 JAVA로 생성한 순수한 객체
            - JAVA를 알면 스프링도 알기 쉽다 ( 자바 객체지향 문법에 충실)
            - 오픈소스 : 누구나 볼 수 있도록 공개한 코드
            - 프레임워크 : 틀/뼈대를 제공해서 일정한 규약을 갖고 무언가를 작업하는 일
                vs 라이브러리 : 도구를 제공(미리 만든 클래스/인터페이스/메서드 등)
        2. 엔터프라이즈 시스템 개발에 필요한 모든 분야를 지원하는 하나의 플랫폼으로 발전됨
            - 엔터프라이즈(Enterprise) : 복잡하고 정교한 대규모 모델
        3. 전자정부프레임워크로 채택되어있다.
            - 공공부문 정보화 사업 플랫폼의 기준

    - 스프링부트
    * 개발자가 환경설정을 자동화/간소외하고 비즈니스 로직에 집중할 수 있다.
        1. 복잡한 여러 라이프러리 관리를 하는 XML 방식 감소화
            - 라이브러리 자동화도구 : Gradle, Maven 등
            - 스프링부트는 기본적으로 모든 빈(Bean)/인스턴스 설장을 @(어노테이션)으로 처리한다.
        2. TOMCAT 웹 서버 내장, 복잡한 외적 환경설정과 실행을 간소화.

    - IntelliJ 한글 깨지는 경우
        [1]
            설정에 인코딩 검색, 프로젝트 인코딩 & 프로퍼티 파일 인코딩 -> UTF-8

        [2]
            메뉴 > 도움말 > 사용자 지정 VM 옵션 >
            -Dfile.encoding=UTF-8
            -Dconsole.encoding=UTF-8
            추가 및 재실행

    - 스프링부트 프로젝트 구조
        * 순수 JAVA프로젝트와 달리 프로젝트 패키지구조를 규칙대로 지켜야 한다
            - 미리 정해진 규칙이므로 개발자간 협업시 유리하다 <-> 자유도가 떨어진다
        1. src/main/java : 개발자가 만들 자바 소스파일 위치하는 패키지
                - 상위 패키지명은 주로 웹사이트의 url을 반대로 한다
                e.g. naver.com
                src/main/java/com/naver/AppStart.class : 해당 스프링부트 실행하는 클래스
        2. resources
                /static : 정적 웹 리소스 파일 위치 패키지, 주로 HTML,CSS,JS
                    웹 주소 : static 이후 주소부터 (static/index.html -> localhost/index.html)
                    /image : 이미지 파일들
                /application.properties 파일 : 프로젝트의 전반적인 설정 또는 속성
                /templates : 동적 웹 리소스 파일 위치 패키지, JSP, ThymeLeaf, Mustache 등등
        3. build.gradle : 라이브러리들의 의존성 설정 등 프로젝트 전반 환경 설정 파일

    - 정적 리소스 : 순수 HTML, 별도의 렌더링이 필요없다
        - resources 하위 폴더 /static 폴더에 저장하고 사용
        - HTML, CSS, JS, 이미지 (static/image) 등
        - 순수 프론트엔드

    - 동적 리소스 : 웹서버가 렌더링해서 클라이언트 HTML에 반환
        - resources 하위 폴더 /templates 폴더에 저장하고 사용
        - JSP (JSTL[JAVA] + HTML), Thymeleaf(HTML + 고유문법), Mustache(HTML + 고유문법)
            - 프론트엔드 개발자 : HTML,CSS,JS,REACT  백엔드 개발자 : JAVA, PYTHON
            JSP : HTML과 JAVA언어를 하나의 파일에 작성할 수 있도록 만든 템플릿
                단점 : 프론트엔드 & 백엔드가 뒤섞여 유지보수가 어렵다
            -> AJAX, REST API 등 사용시 협업 향상
                - 프론트엔드 개발자 : HTML,CSS,JS,REACT <-- REST API(AJAX) --> 백엔드 개발자 : SPRING(JAVA)
        - JAVA + HTML
        - Spring : JSP X, Thymeleaf O, Mustache O
        - Spring에서 JSP 사용하기
            [1] 그레이들
                - gradle.build dependencies에 implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
            [2] application.properties
                spring.mvc.view.prefix = /WEB-INF/
                spring.mvc.view.suffix = .jsp
            [3] .jsp 파일 위치
                - jsp 파일들은 프로젝트내 src/main/webapp/WEB-INF
        - 수업에서 : Thymeleaf
            [1] 그레이들
                implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
            [2] 타임리프 파일 위치
                resources/templates/, .html 파일
[p.292] 7/16
스프링 웹 MVC
    서비스 사용?
        - 클라이언트 <===> 컨트롤러 <===> 서비스 <===> DAO <===> DB
        - 컨트롤러를 요청 처리에 대한 흐름 제어만 하도록 한다
        - @Controller, @Service, @Repository
            컨트롤러      서비스       DAO
