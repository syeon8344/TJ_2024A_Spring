스프링부트
    - 스프링과 스프링부트 구성물은 다르지 않다
    - 스프링부트는 스프링에 설정 자동 세팅/관리를 더한 것
    - JAVA, DB, HTTP, JS, CSS 및 Servlet** 등의 이해도가 필요
    - 스프링
        1. Plain Old Java Object 기반 경량화된 개발환경을 제공하는 오픈소스 프레임워크
            - 무서운 객체가 아니라 JAVA로 생성한 순수한 객체
            - JAVA를 알면 스프링도 알기 쉽다 ( 자바 객체지향 문법에 충실)
            - 오픈소스 : 누구나 볼 수 있도록 공개한 코드
            - 프레임워크 : 틀/뼈대를 제공해서 일정한 규약을 갖고 무언가를 작업하는 일
                vs 라이브러리 : 도구를 제공(미리 만든 클래스/인터페이스/메서드 등)
        2. 엔터프라이즈 시스템 개발에 필요한 모든 분야를 지원하는 하나의 플랫폼으로 발전됨
            - 엔터프라이즈(Enterprise) : 복잡하고 정교한 대규모 모델
        3. 전자정부프레임워크로 채택되어있다.
            - 공공부문 정보화 사업 플랫폼의 기준

    - 스프링부트
    * 개발자가 환경설정을 자동화/간소외하고 비즈니스 로직에 집중할 수 있다.
        1. 복잡한 여러 라이프러리 관리를 하는 XML 방식 감소화
            - 라이브러리 자동화도구 : Gradle, Maven 등
            - 스프링부트는 기본적으로 모든 빈(Bean)/인스턴스 설장을 @(어노테이션)으로 처리한다.
        2. TOMCAT 웹 서버 내장, 복잡한 외적 환경설정과 실행을 간소화.

    - IntelliJ 한글 깨지는 경우
        [1]
            설정에 인코딩 검색, 프로젝트 인코딩 & 프로퍼티 파일 인코딩 -> UTF-8

        [2]
            메뉴 > 도움말 > 사용자 지정 VM 옵션 >
            -Dfile.encoding=UTF-8
            -Dconsole.encoding=UTF-8
            추가 및 재실행

    - 스프링부트 프로젝트 구조
        * 순수 JAVA프로젝트와 달리 프로젝트 패키지구조를 규칙대로 지켜야 한다
            - 미리 정해진 규칙이므로 개발자간 협업시 유리하다 <-> 자유도가 떨어진다
        1. src/main/java : 개발자가 만들 자바 소스파일 위치하는 패키지
                - 상위 패키지명은 주로 웹사이트의 url을 반대로 한다
                e.g. naver.com
                src/main/java/com/naver/AppStart.class : 해당 스프링부트 실행하는 클래스
        2. resources
                /static : 정적 웹 리소스 파일 위치 패키지, 주로 HTML,CSS,JS
                /application.properties 파일 : 프로젝트의 전반적인 설정 또는 속성
                /templates : 동적 웹 리소스 파일 위치 패키지, JSP, ThymeLeaf, Mustache 등등
        3. build.gradle : 라이브러리들의 의존성 설정 등 프로젝트 전반 환경설정파일
}