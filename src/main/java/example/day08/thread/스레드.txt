프로그램 : 프로그래밍 언어들의 명령어 집합
프로세스 : 현재 실행중인 프로그램
    - 프로그램 1개당 프로세스 존재 (1개 이상)
멀티태스킹 : 두 가지 이상의 일/프로그램을 동시에 처리
멀티프로세스 : 운영체제가 동시에 여러 프로세스를 생성해서 처리하는 기술
    - 프로그램 단위 멀티태스킹
    - 프로세스끼리 서로 독립적이다 (서로에게 영향이 없다)
        - 카카오톡 & 크롬 & IDE 프로그램/프로세스 동시 실행
        - 카카오톡에서 오류 발생해도 크롬, IDE는 정상
스레드 : 프로세스 내에서 실행되는 흐름의 단위
    - 싱글 스레드 : 프로세스내 실행 흐름이 1개
    - 멀티 스레드 : 프로세스내 실행 흐름이 2개 이상
        - 스레드 단위의 멀티태스킹
        - 스레드끼리 서로 종속적 (서로에게 영향을 준다)
        - ex) 카카오톡 메시지/파일/사진 전송시 한쪽 오류 발생 -> 카카오톡 프로세스 종료 -> 다른 전송과정도 같이 종료된다
싱글스레드 구현 ( 기본으로 제공됨 )
    - 자바코드를 컴파일해서 실행하기 위한 내장 싱글스레드 : main() 메서드
    - JavaScript : 크롬브라우저 스레드
멀티스레드 구현
    * extends : 하나의 클래스로부터만 상속가능
    * implements : 여러 인터페이스 구현가능
    - 익명 구현체 : 구현하는 클래스가 이름이 없다. 1회성 구현체 만들 때 주로 사용.
    [1] Thread 클래스로부터 상속받아 run() 오버라이드
        1. class 클래스명 extends Thread {}
        2. @Override public void run(){멀티스레드 실행할 코드/실행문;}
        3. 클래스 변수명 : new 생성자();
        4. 변수명.start();

    [2] Runnable 인터페이스로부터 구현해서 run 메소드 재정의
        - start()가 인터페이스에 없어서 Thread 클래스 사용 필요
        1. class className implements Runnable {}
        2. @Override public void run() {멀티스레드 코드/실행문}
        3. Runnable 변수명/구현체 = new className();
        4. Thread thread = new Thread(변수명/구현체);
            = Thread thread = new Thread(new className()); (3 + 4)
        5. thread.start();

    [3-1] (익명) 구현체
        1. Thread thread = new Thread(){
               @Override public void run(){
                   멀티스레드 코드/실행문
               }
            }
        2. thread.start();
    [3-2]
        1. Thread thread = new Thread( new Runnable(){
                @Override public void run() {
                    멀티로 처리할 코드/실행문;
                }
            } );
        2. thread.start()