* 인터페이스 : 동일한 목적 및 서로 다른 기능(@Override)을 수행하기 위한 통합
* 구현(객)체 : 해당 인터페이스를 구현(@Override)한 클래스로 객체 생성
- Collection
    [1] List 인터페이스
        - 공통 : 저장된 순서(인덱스) 이용한 데이터 관리, 데이터 중복 허용
        - 1. ArrayList 클래스
            - 객체 선언법
            List<제네릭타입>변수명 = new ArrayList<>();  -> 인터페이스타입일 경우 타입 변환이 수월
            ArrayList<제네릭타입>변수명 = new ArrayList<>();
            - 제네릭 타입 : 리스트 객체에 저장할 요소들의 타입
            - 자주 사용되는 메서드
                1. .add(요소) : 리스트에 요소 추가
                2. .set(인덱스, 요소) : 리스트 특정 인덱스의 요소 수정 (대체됨)
                3. .size() : 리스트 내 요소 갯수
                4. .get(인덱스) : 리스트 내 특정 인덱스의 요소 값 호출
                5. .contains(값/객체) : 리스트 내 특정 값 존재여부 확인 t/f
                6. .index(값/객체) : 리스트 내 특정 값 검색, 존재시 인덱스값/없으면 -1
                7. .remove(인덱스/객체) : 리스트 내 특정 인덱스 또는 객체 삭제
                8. .clear() : 전체 요소 삭제
                9. .isEmpty() : 리스트 내 요소가 하나도 없는지 검사 (true/false)
        - 2. Vector 클래스
            - ArrayList와의 차이점 : 동기화 여부 (Vector는 동기화 지원, ArrayList는 X)
            - 멀티스레드 구현시 사용
        - 3. LinkedList 클래스
            - 중간 삽입/삭제 사용시 ArrayList보다 좋은 성능 발휘
    [2] Set 인터페이스
        - 공통점 : 순서(인덱스)가 없고 중복을 허용하지 않는다
        - 1. HashSet 클래스

        - 자주 사용되는 메서드
            1. .add(요소) : set 객체 내 요소 추가
            2. .size() : set 객체 내 요소 총 개수
            3. .remove(요소) : set 객체 내 동일한 요소 삭제
            4. .contains(요소) : 동일한 요소가 있는지 여부 true/false
            5. .clear() : 요소 전체 삭제
            6. .isEmpty() : set 객체 내 요소가 하나도 없으면 true
            7. .iterator() : 반복자 인터페이스 반환
               .hasNext() : 다음 요소가 있으면 true, 없으면 false
               .next() : 다음 요소 호출

        - Set에서 중복 제거하는 법 : 객체의 주소값을 비교해서 이미 존재하는 주소값은 저장하지 않는다
            - 객체들은 주소값이 다르다 : 논리적으로 같은 객체여도 중복으로 추가될 수 있다
            - 리터럴 제외한 객체들의 중복처리 및 제거
                1. hashCode() 재정의
                2. equals() 재정의
                    @Override
                    public boolean equals(Object obj) {
                        if (obj instanceof 클래스명){
                            클래스명 변수명 = (클래스명) obj;
                            if(this.중복기준필드 == 변수명.중복기준필드{
                                return true;
                            } else {return false;}
                        }
                        return false;
                    }

                    @Override
                    public int hashCode() {
                        return 중복기준필드;
                    }

- Map
     - 공통점 : 저장된 순서(인덱스) 없음, key-value 한 쌍 (엔트리)
     - key 중복 불가, value 중복 가능 e.g. 'A'=1, 'B'=2, 'C'=1 ...
     - 1. HashMap 클래스

     - 자주 사용되는 메서드
        1. .put(key, value) : key 와 value 엔트리 추가
        2. .size() : 엔트리 갯수
        3. .get(key) : key 값에 대응되는 value 반환
        4. .remove(key) : key 값이 있는 엔트리 삭제
        5. .clear() : 엔트리 삭제
        6. .isEmpty() : 엔트리가 없으면 true
        7. .keySet() : 모든 key 를 Set으로 반환
        8. .values() : 모든 value 를 Collection으로 반환
        9. .entrySet() : 모든 entry 를 Set으로 반환

- 자료구조
    - 컴퓨터 과학에서 *효율*적인 자료의 관리, 조작, 저장법
    - 특정 상황 기준의 자료 정리시 검색,정렬,통계시 유용
    - e.g. 리스트, 스택, 트리, 큐, 그래프 등
    - 사용처 : 1. (java) 컬렉션 프레임워크  2. 기술면접(코딩테스트, 과제형테스트)

- 스택, 큐
    [1] 스택
        - 데이터를 저장하는 선형 자료 구조
        - LIFO : Last In First Out (후입선출), 마지막에 들어온 자료가 가장 먼저 나온다
        - 실생활 예시 : 뒤로가기 기능, 프링글스, 재귀 알고리즘 등
        - 관련 용어
            1. push : 스택구조에 데이터를 추가하기, 새 데이터는 항상 스택 구조의 맨 위
            2. pop : 스택 구조에서 데이터를 제거하고 반환, 가장 최근에 추가된 데이터를 반환
            3. top : 가장 최근에 추가한 자료의 위치 ( 스택의 제일 윗부분)
            4. peek : 스택 구조 맨 위의 데이터 반환하지만 삭제는 하지 않는다, 데이터 확인용
        - Stack 클래스
            - Vector 클래스 기반
            - 주요 메서드 : 1. push() 2. pop() 3. peek(()

    [2] 큐
        - 데이터를 저장하는 선형 자료 구조
        - FIFO : First In First Out (선입선출), 먼저 들어온 자료가 가장 먼저 나간다
        - 실생활 예시 : 선착순, 프린터 큐, BFS 알고리즘 등
        - 관련 용어
            1. Enque: 큐에 데이터 추가, 새 데이터는 항상 맨 마지막에
            2. Deque : 가장 처음에 추가되었던 데이터 반환 및 삭제
            3. peek : 큐 맨 앞의 데이터를 반환하지만 삭제하지 않는다, 데이터 확인용
        - 자바에서 제공 : Queue 인터페이스
            - LinkedList 클래스의 구현체를 필요로 한다
            - 주요 메서드 : offer() 2. poll() 3. peek(()

- 이진 트리
    - 데이터를 저장하는 비선형 자료 구조
    - 각 노드가 최대 2개의 자식 노드를 가질 수 있다
    - 왼쪽 자식노드의 데이터는 부모 노드보다 작고, 오른쪽은 부모 노드보다 크다
    - e.g. *데이터 검색, 정렬, 파일 시스템 등
    - 용어
        1. 노드 : 데이터가 들어가는 공간
        2. 부모노드 : 특정 노드의 바로 위 로드
        3. 자식노드 : 특정 노드의 바로 아래에 있는 노드들, 이진트리에서는 최대 2개
        4. 루트노드 : 트리의 맨 위 노드, 루트노드는 시작하는 경로를 통해 접근
        5. 깊이 : 루트노드에서 특정 노드까지의 경로의 깊이
        6. 높이: 트리의 최대 깊이, 가장 깊은 노드의 길이
    - 자바 제공 : TreeSet 클래스
        - TreeSet 클래스로 객체 사용
        -메서드
            - set 메서드와 메서드 동일
            1. first() last() lower() data()
            5. floor() 6. ceiling
            7. descendingSet();
            8. tailSet(데이터, t/f)
            9. headSet(데이터, t/f)
            10. subSet(시작데이터, true/false, 끝 데이터, true/false);
        - TreeMap 클래스로 객체 사용
        - 메서드
            - map 메서드와 메서드 동일
            1. firstEntry() lastEntry() lowerEntry() higherEntry()
            2. floorEntry(experts) and ceilingEntry(여담)

    - 정렬기준
        - Comparable 인터페이스, Comparator 인터페이스
        - TreeSet<Generic>, TreeMap<Generic> 사용해서 Tree 자료구조를 구현
        - 제네릭에 들어가는 타입들 : Integer, Double, String 등
            - JAVA에서 제공되는 몇몇 클래스에는 Comparable이 이미 구현되어있다, 주로 리터럴 타입들
            - 직접 만든 클래스는 처음에 Comparable 구현이 안 되어 있으므로 구현해야 가능
