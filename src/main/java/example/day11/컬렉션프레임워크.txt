* 인터페이스 : 동일한 목적 및 서로 다른 기능(@Override)을 수행하기 위한 통합
* 구현(객)체 : 해당 인터페이스를 구현(@Override)한 클래스로 객체 생성
- Collection
    [1] List 인터페이스
        - 공통 : 저장된 순서(인덱스) 이용한 데이터 관리, 데이터 중복 허용
        - 1. ArrayList 클래스
            - 객체 선언법
            List<제네릭타입>변수명 = new ArrayList<>();  -> 인터페이스타입일 경우 타입 변환이 수월
            ArrayList<제네릭타입>변수명 = new ArrayList<>();
            - 제네릭 타입 : 리스트 객체에 저장할 요소들의 타입
            - 자주 사용되는 메서드
                1. .add(요소) : 리스트에 요소 추가
                2. .set(인덱스, 요소) : 리스트 특정 인덱스의 요소 수정 (대체됨)
                3. .size() : 리스트 내 요소 갯수
                4. .get(인덱스) : 리스트 내 특정 인덱스의 요소 값 호출
                5. .contains(값/객체) : 리스트 내 특정 값 존재여부 확인 t/f
                6. .index(값/객체) : 리스트 내 특정 값 검색, 존재시 인덱스값/없으면 -1
                7. .remove(인덱스/객체) : 리스트 내 특정 인덱스 또는 객체 삭제
                8. .clear() : 전체 요소 삭제
                9. .isEmpty() : 리스트 내 요소가 하나도 없는지 검사 (true/false)
        - 2. Vector 클래스
            - ArrayList와의 차이점 : 동기화 여부 (Vector는 동기화 지원, ArrayList는 X)
            - 멀티스레드 구현시 사용
        - 3. LinkedList 클래스
            - 중간 삽입/삭제 사용시 ArrayList보다 좋은 성능 발휘
    [2] Set 인터페이스
        - 공통점 : 순서(인덱스)가 없고 중복을 허용하지 않는다
        - 1. HashSet 클래스

        - 자주 사용되는 메서드
            1. .add(요소) : set 객체 내 요소 추가
            2. .size() : set 객체 내 요소 총 개수
            3. .remove(요소) : set 객체 내 동일한 요소 삭제
            4. .contains(요소) : 동일한 요소가 있는지 여부 true/false
            5. .clear() : 요소 전체 삭제
            6. .isEmpty() : set 객체 내 요소가 하나도 없으면 true
            7. .iterator() : 반복자 인터페이스 반환
               .hasNext() : 다음 요소가 있으면 true, 없으면 false
               .next() : 다음 요소 호출

        - Set에서 중복 제거하는 법 : 객체의 주소값을 비교해서 이미 존재하는 주소값은 저장하지 않는다
            - 객체들은 주소값이 다르다 : 논리적으로 같은 객체여도 중복으로 추가될 수 있다
            - 리터럴 제외한 객체들의 중복처리 및 제거
                1. hashCode() 재정의
                2. equals() 재정의
                    @Override
                    public boolean equals(Object obj) {
                        if (obj instanceof 클래스명){
                            클래스명 변수명 = (클래스명) obj;
                            if(this.중복기준필드 == 변수명.중복기준필드{
                                return true;
                            } else {return false;}
                        }
                        return false;
                    }

                    @Override
                    public int hashCode() {
                        return 중복기준필드;
                    }

- Map
     - 공통점 : 저장된 순서(인덱스) 없음, key-value 한 쌍 (엔트리)
     - key 중복 불가, value 중복 가능 e.g. 'A'=1, 'B'=2, 'C'=1 ...
     - 1. HashMap 클래스

     - 자주 사용되는 메서드
        1. .put(key, value) : key 와 value 엔트리 추가
        2. .size() : 엔트리 갯수
        3. .get(key) : key 값에 대응되는 value 반환
        4. .remove(key) : key 값이 있는 엔트리 삭제
        5. .clear() : 엔트리 삭제
        6. .isEmpty() : 엔트리가 없으면 true
        7. .keySet() : 모든 key 를 Set으로 반환
        8. .values() : 모든 value 를 Collection으로 반환
        9. .entrySet() : 모든 entry 를 Set으로 반환