* 인터페이스 : 동일한 목적 및 서로 다른 기능(@Override)을 수행하기 위한 통합
* 구현(객)체 : 해당 인터페이스를 구현(@Override)한 클래스로 객체 생성
- Collection
    [1] List 인터페이스
        - 공통 : 저장된 순서(인덱스) 이용한 데이터 관리, 데이터 중복 허용
        - 1. ArrayList 클래스
            - 객체 선언법
            List<제네릭타입>변수명 = new ArrayList<>();  -> 인터페이스타입일 경우 타입 변환이 수월
            ArrayList<제네릭타입>변수명 = new ArrayList<>();
            - 제네릭 타입 : 리스트 객체에 저장할 요소들의 타입
            - 자주 사용되는 메서드
                1. .add(요소) : 리스트에 요소 추가
                2. .set(인덱스, 요소) : 리스트 특정 인덱스의 요소 수정 (대체됨)
                3. .size() : 리스트 내 요소 갯수
                4. .get(인덱스) : 리스트 내 특정 인덱스의 요소 값 호출
                5. .contains(값/객체) : 리스트 내 특정 값 존재여부 확인 t/f
                6. .index(값/객체) : 리스트 내 특정 값 검색, 존재시 인덱스값/없으면 -1
                7. .remove(인덱스/객체) : 리스트 내 특정 인덱스 또는 객체 삭제
                8. .clear() : 전체 요소 삭제
                9. .isEmpty() : 리스트 내 요소가 하나도 없는지 검사 (true/false)
        - 2. Vector 클래스
            - ArrayList와의 차이점 : 동기화 여부 (Vector는 동기화 지원, ArrayList는 X)
            - 멀티스레드 구현시 사용
        - 3. LinkedList 클래스
            - 중간 삽입/삭제 사용시 ArrayList보다 좋은 성능 발휘
    [2] Set 인터페이스