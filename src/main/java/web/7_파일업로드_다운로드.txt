IntelliJ(개발자 코드) --------------- 웹서버 ( 아파치 톰캣 ) ------------------- 클라이언트( 브라우저/크롬 사용자 )
  스프링 @클래스들        톰캣 실행        스프링 @클래스들
  HTML, CSS 등       >>>AppStart>>>    HTML, CSS 등 바이트코드
  3. 업로드된 파일 저장   <<<<<<<<<<<   2. @Controller 업로드 처리  <<<<<<<<<<<<   1.업로드 처리

  3. (1.업로드된 파일 포함 재실행) >AppStart>>> <<<<2.업로드 된 파일 조회 <<<<<<<<<<<<<   1. 업로드 파일 조회
                                              /resources/static
                                            *톰캣 재실행시 리빌드, 배포된 서버 내 저장된 파일 삭제
- 스트림 : 데이터가 다니는 통로의 흐름
    - 주로 자바 외 장치와 데이터를 주고받을 때 : 키보드, 파일처리, JDBC, 네트워크 등
    - InputStream : 읽어들이는 통로, OutputStream : 내보내는 통로
    - 버퍼 : 특정 위치로 이동하는 동안 잠시 데이터를 보관하는 메모리

- HTML에서 첨부파일 입력 받을 때
    1. <input type="file" id="file" />
    2. JS에서 첨부파일의 value 호출 : document.querySelector("#bfile").value
        - "C:\fakepath\파일명"
        - JS는 유저(클라이언트)의 실제 파일 경로를 얻을 수 없다 (브라우저 법/규칙)

- 업로드 : 파일을 특정한 곳에 올리기
    - 유저(클라이언트)PC/모바일의 파일을 서버(Spring 내장 Tomcat 서버)로 이동/복사
    - 이동/복사
        - 대용량 이동시에 HTTP는 바이트만 지원

- 다운로드 : 파일을 내려받기



1. 업로드 구현 방법
    1. HTML : <form class="boardWriteForm">
                  <input type="file" class="bfile"/>
              </form>
    2. form 전체 HTML 호출
        JS : let boardWriteForm = document.querySelector(".boardWriteForm")
    3. form 전체 HTML을 바이트로 변환해주는 기능이 담긴 객체로 변환
        - new formData()
        JS : let boardWriteFormData = new FormData( boardWriteForm );

    4. AJAX 대용량 전송 필수 옵션
        - method : post, put
        - data : boardWriteFormData (new FormData 이름)
        - contentType : false
        - processData : false

    5. MultipartFile
        1. 실제 파일이름 추출
            multipartFile.getOriginalFilename()
        2. 파일 이름 정의 - 중복 파일도 식별 가능한 파일명으로
            String uuid = UUID.randomUUID().toString();
            String fileName = multipartFile.getOriginalFilename();
            fileName = uuid+"_"+fileName.replaceAll("_","-")
        3. 업로드 된 폴더 경로 (\\ = \ 탈출문자 + 경로 \) e.g. static\upload\일 때
            1. 개발자 폴더 : "C:\\Users\\tj-bu-703-15\\Desktop\\TJ_2024A_Spring\\src\\main\\resources\\static\\upload\\"
            2. 배포 톰캣 폴더 : "C:\\Users\\tj-bu-703-15\\Desktop\\TJ_2024A_Spring\\build\\resources\\main\\static\\upload\\"
        4. 업로드, 바이트로 변환된 데이터를 해당 경로에 파일로 생성
            .transferTo(File 타입 업로드 주소+파일명)

2. 다운로드 구현 방법
        ------------- 다운로드할 파일 읽어오기 ----------- 대상 : 파일
    1. 다운로드 파일의 경로 설정
        String downloadPath = uploadPath + filename;
        File file = new File(downloadPath);
    2. 해당 파일을 바이트 형식으로 읽어들여 배열로 저장 (이동 통로가 바이트만 지원)
        [1] 파일 입력 스트림
            FileInputStream fin = new FileInputStream(파일경로);
        [2] 읽어올 바이트를 저장할 배열 생성
            long fileSize = file.length();
            byte[] bytes = new byte[(int) fileSize];
        [3] 파일 입력 스트림 객체를 이용한 바이트 읽기
            fin.read(bytes);
        [4] 스트림 객체 수동 제거 (JVM도 제거 가능하지만 안전을 위해)
            fin.close();
       ---------------- 읽어온 바이트 내보내기 ------------ 대상 : HTTP 웹/앱
    3. 배열에 저장된 바이트를 HTTP로 내보내기
        [1] HTTP 응답 객체
            @Autowired private HttpServletResponse response;
        [2] HTTP 응답 스트림 호출
            ServletOutputStream fout = response.getOutputStream();
        [3] 출력할 배열 내보내기
            fout.write(bytes)
            fout.close();
        [4] 스트림 객체 제거
            fout.close();
    4.브라우저의 다운로드 형식을 HTTP header(응답 관련 정보들이 들어있는 곳)에 보내주기
        response.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode("다운로드 형식에 표시될 파일명", "UTF-8"));

- File 클래스 : 해당 경로의 파일을 객체화해서 다양한 메서드 제공
    1. File file = new File(파일 경로 + 파일명) : 해당 경로의 파일 객체 생성
    2. .exists() : 해당 경로에 파일이 존재하면 true, 없으면 false
    3. .length() : 파일이 있으면 파일의 용량을 바이트 길이 단위로 반환(파일 용량 확인)

* HTML form과 자바의 BoardDto 필드와 매핑시 주의할 점
    - HTTP *name 속성과 DTO의 필드명이 동일해야 한다
    - form 전송시 form 내의 데이터 식별할 때 name 속성의 이름으로 식별

* 자바에서 대용량 바이트의 타입
    <input type="text" class="bfile" /> --> String 가능
    <input type="file" class="bfile" /> --> String 불가능
    MultipartFile 인터페이스 : Spring 제공 라이브러리
        - 주로 대용량 바이트 파일 조작시 사용되는 인터페이스

